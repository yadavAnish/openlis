/**
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations under
 * the License.
 *
 * The Original Code is OpenELIS code.
 *
 * Copyright (C) CIRG, University of Washington, Seattle WA.  All Rights Reserved.
 *
 */
package us.mn.state.health.lims.qaevent.action.retroCI;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.validator.GenericValidator;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import us.mn.state.health.lims.common.action.BaseAction;
import us.mn.state.health.lims.common.action.BaseActionForm;
import us.mn.state.health.lims.common.exception.LIMSInvalidConfigurationException;
import us.mn.state.health.lims.common.formfields.FormFields;
import us.mn.state.health.lims.common.formfields.FormFields.Field;
import us.mn.state.health.lims.common.services.DisplayListService;
import us.mn.state.health.lims.common.services.DisplayListService.ListType;
import us.mn.state.health.lims.common.services.QAService;
import us.mn.state.health.lims.common.services.QAService.QAObservationType;
import us.mn.state.health.lims.common.util.DAOImplFactory;
import us.mn.state.health.lims.common.util.DateUtil;
import us.mn.state.health.lims.note.dao.NoteDAO;
import us.mn.state.health.lims.note.daoimpl.NoteDAOImpl;
import us.mn.state.health.lims.note.util.NoteUtil;
import us.mn.state.health.lims.note.valueholder.Note;
import us.mn.state.health.lims.observationhistory.dao.ObservationHistoryDAO;
import us.mn.state.health.lims.observationhistory.daoimpl.ObservationHistoryDAOImpl;
import us.mn.state.health.lims.observationhistory.valueholder.ObservationHistory;
import us.mn.state.health.lims.observationhistorytype.dao.ObservationHistoryTypeDAO;
import us.mn.state.health.lims.observationhistorytype.daoImpl.ObservationHistoryTypeDAOImpl;
import us.mn.state.health.lims.observationhistorytype.valueholder.ObservationHistoryType;
import us.mn.state.health.lims.organization.dao.OrganizationDAO;
import us.mn.state.health.lims.organization.daoimpl.OrganizationDAOImpl;
import us.mn.state.health.lims.organization.valueholder.Organization;
import us.mn.state.health.lims.patient.util.PatientUtil;
import us.mn.state.health.lims.patient.valueholder.Patient;
import us.mn.state.health.lims.person.dao.PersonDAO;
import us.mn.state.health.lims.person.daoimpl.PersonDAOImpl;
import us.mn.state.health.lims.person.valueholder.Person;
import us.mn.state.health.lims.project.dao.ProjectDAO;
import us.mn.state.health.lims.project.daoimpl.ProjectDAOImpl;
import us.mn.state.health.lims.project.valueholder.Project;
import us.mn.state.health.lims.provider.dao.ProviderDAO;
import us.mn.state.health.lims.provider.daoimpl.ProviderDAOImpl;
import us.mn.state.health.lims.provider.valueholder.Provider;
import us.mn.state.health.lims.qaevent.valueholder.retroCI.QaEventItem;
import us.mn.state.health.lims.referencetables.dao.ReferenceTablesDAO;
import us.mn.state.health.lims.referencetables.valueholder.ReferenceTables;
import us.mn.state.health.lims.requester.dao.SampleRequesterDAO;
import us.mn.state.health.lims.requester.daoimpl.SampleRequesterDAOImpl;
import us.mn.state.health.lims.requester.valueholder.SampleRequester;
import us.mn.state.health.lims.sample.action.SamplePatientEntrySaveAction;
import us.mn.state.health.lims.sample.dao.SampleDAO;
import us.mn.state.health.lims.sample.daoimpl.SampleDAOImpl;
import us.mn.state.health.lims.sample.util.SamplePropertyUtil;
import us.mn.state.health.lims.sample.valueholder.Sample;
import us.mn.state.health.lims.samplehuman.dao.SampleHumanDAO;
import us.mn.state.health.lims.samplehuman.daoimpl.SampleHumanDAOImpl;
import us.mn.state.health.lims.samplehuman.valueholder.SampleHuman;
import us.mn.state.health.lims.sampleitem.dao.SampleItemDAO;
import us.mn.state.health.lims.sampleitem.daoimpl.SampleItemDAOImpl;
import us.mn.state.health.lims.sampleitem.valueholder.SampleItem;
import us.mn.state.health.lims.sampleproject.dao.SampleProjectDAO;
import us.mn.state.health.lims.sampleproject.daoimpl.SampleProjectDAOImpl;
import us.mn.state.health.lims.sampleproject.valueholder.SampleProject;
import us.mn.state.health.lims.sampleqaevent.dao.SampleQaEventDAO;
import us.mn.state.health.lims.sampleqaevent.daoimpl.SampleQaEventDAOImpl;
import us.mn.state.health.lims.sampleqaevent.valueholder.SampleQaEvent;
import us.mn.state.health.lims.test.daoimpl.TestSectionDAOImpl;
import us.mn.state.health.lims.test.valueholder.TestSection;
import us.mn.state.health.lims.typeofsample.dao.TypeOfSampleDAO;
import us.mn.state.health.lims.typeofsample.daoimpl.TypeOfSampleDAOImpl;
import us.mn.state.health.lims.typeofsample.valueholder.TypeOfSample;

public class NonConformityAction extends BaseAction {

	private Patient patient;
	private List<ObservationHistory> observationHistoryList;
	private List<SampleQaEvent> sampleQAEventList;

	public static String DOCTOR_OBSERVATION_TYPE_ID;
	public static String SERVICE_OBSERVATION_TYPE_ID;
	public static String SAMPLE_QAEVENT_TABLE_ID;
	public static String SAMPLE_TABLE_ID;
	private static final String QA_NOTE_SUBJECT = "QaEvent Note";

	private static NoteDAO noteDAO = new NoteDAOImpl();
	private static SampleDAO sampleDAO = new SampleDAOImpl();
	private static SampleItemDAO sampleItemDAO = new SampleItemDAOImpl();
	private static TypeOfSampleDAO typeOfSampleDAO = new TypeOfSampleDAOImpl();
	private static ObservationHistoryTypeDAO ohtDAO = new ObservationHistoryTypeDAOImpl();
	private static SampleHumanDAO sampleHumanDAO = new SampleHumanDAOImpl();
	private static PersonDAO personDAO = new PersonDAOImpl();
	private static ProviderDAO providerDAO = new ProviderDAOImpl();
	private static OrganizationDAO orgDAO = new OrganizationDAOImpl();

	private Boolean readOnly = Boolean.FALSE;
	private boolean sampleFound;
	private Sample sample;
	private boolean useSiteList;

	public static final String getOHTypeIdByName(String name) {
		ObservationHistoryType oht = ohtDAO.getByName(name);
		return (oht == null) ? null : oht.getId();
	}

	static {
		DOCTOR_OBSERVATION_TYPE_ID = getOHTypeIdByName("nameOfDoctor");
		SERVICE_OBSERVATION_TYPE_ID = getOHTypeIdByName("service");

		ReferenceTablesDAO rtDAO = DAOImplFactory.getInstance().getReferenceTablesDAOImpl();
		ReferenceTables referenceTable = new ReferenceTables();

		referenceTable.setTableName("SAMPLE_QAEVENT");
		referenceTable = rtDAO.getReferenceTableByName(referenceTable);
		SAMPLE_QAEVENT_TABLE_ID = referenceTable.getId();

		referenceTable = new ReferenceTables();
		referenceTable.setTableName("SAMPLE");
		referenceTable = rtDAO.getReferenceTableByName(referenceTable);
		SAMPLE_TABLE_ID = referenceTable.getId();

	}

	@Override
	protected ActionForward performAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		useSiteList = FormFields.getInstance().useField(Field.NON_CONFORMITY_SITE_LIST);

		BaseActionForm dynaForm = (BaseActionForm) form;

		dynaForm.initialize(mapping);

		readOnly = Boolean.FALSE;

		request.getSession().setAttribute(SAVE_DISABLED, TRUE);

		String labNumber = request.getParameter("labNo");

		if (!GenericValidator.isBlankOrNull(labNumber)) {

			sample = getSampleForLabNumber(labNumber);

			sampleFound = !(sample == null || GenericValidator.isBlankOrNull(sample.getId()));

			PropertyUtils.setProperty(dynaForm, "labNo", labNumber);
			Date today = Calendar.getInstance().getTime();
			PropertyUtils.setProperty(dynaForm, "date", DateUtil.formatDateAsText(today));
			if (FormFields.getInstance().useField(Field.QATimeWithDate)) {
				PropertyUtils.setProperty(dynaForm, "time", DateUtil.nowTimeAsText());
			}

			if (sampleFound) {
				createForExistingSample(dynaForm);
			}

			setProjectList(dynaForm);

			PropertyUtils.setProperty(dynaForm, "sampleItemsTypeOfSampleIds", getSampleTypeOfSamplesString());
			PropertyUtils.setProperty(dynaForm, "sections", createSectionList());
			PropertyUtils.setProperty(dynaForm, "qaEventTypes", DisplayListService.getList(ListType.QA_EVENTS));
			PropertyUtils.setProperty(dynaForm, "qaEvents", getSampleQaEventItems(sample));

			SamplePropertyUtil.loadSampleTypes(dynaForm, "typeOfSamples");

			PropertyUtils.setProperty(dynaForm, "readOnly", readOnly);
			PropertyUtils.setProperty(dynaForm, "siteList", DisplayListService.getFreshList(ListType.SAMPLE_PATIENT_REFERRING_CLINIC));
			Provider provider = getProvider();
			if (provider != null) {
				PropertyUtils.setProperty(dynaForm, "providerNew", Boolean.FALSE.toString());
				PropertyUtils.setProperty(dynaForm, "requesterSampleID", provider.getExternalId());
				Person providerPerson = getProviderPerson(provider);
				if (providerPerson != null && !providerPerson.getId().equals(PatientUtil.getUnknownPerson().getId())) {
					PropertyUtils.setProperty(dynaForm, "providerFirstName", providerPerson.getFirstName());
					PropertyUtils.setProperty(dynaForm, "providerLastName", providerPerson.getLastName());
					PropertyUtils.setProperty(dynaForm, "providerWorkPhone", providerPerson.getWorkPhone());
				}
			} else {
				PropertyUtils.setProperty(dynaForm, "providerNew", Boolean.TRUE.toString());
				PropertyUtils.setProperty(dynaForm, "requesterSampleID", "");
				PropertyUtils.setProperty(dynaForm, "providerFirstName", "");
				PropertyUtils.setProperty(dynaForm, "providerLastName", "");
				PropertyUtils.setProperty(dynaForm, "providerWorkPhone", "");
			}
		}

		return mapping.findForward(FWD_SUCCESS);
	}

	private void createForExistingSample(BaseActionForm dynaForm) throws IllegalAccessException, InvocationTargetException,	NoSuchMethodException {
		getPatient(sample);
		getObservationHistory(sample);
		getSampleQaEvents(sample);
		PropertyUtils.setProperty(dynaForm, "sampleId", sample.getId());
		if (patient != null) {
			PropertyUtils.setProperty(dynaForm, "patientId", patient.getId());
		}
		Project project = getProjectForSample(sample);
		if (project != null) {
			PropertyUtils.setProperty(dynaForm, "projectId", project.getId());
			PropertyUtils.setProperty(dynaForm, "project", project.getLocalizedName());
		}

		String subjectNo = getSubjectNumber(sample);
		if (!GenericValidator.isBlankOrNull(subjectNo)) {
			PropertyUtils.setProperty(dynaForm, "subjectNew", Boolean.FALSE);
			PropertyUtils.setProperty(dynaForm, "subjectNo", getSubjectNumber(sample));
		}

		ObservationHistory doctorObservation = getRefererObservation(sample);
		if (doctorObservation != null) {
			PropertyUtils.setProperty(dynaForm, "doctorNew", Boolean.FALSE);
			PropertyUtils.setProperty(dynaForm, "doctor", doctorObservation.getValue());
		}

		if (useSiteList) {
			PropertyUtils.setProperty(dynaForm, "serviceNew", Boolean.FALSE);
			PropertyUtils.setProperty(dynaForm, "service", getSampleRequesterOrganizationName());
		} else {
			ObservationHistory serviceObservation = getServiceObservation(sample);
			if (serviceObservation != null) {
				PropertyUtils.setProperty(dynaForm, "serviceNew", Boolean.FALSE);
				PropertyUtils.setProperty(dynaForm, "service", serviceObservation.getValue());
			}
		}

		PropertyUtils.setProperty(dynaForm, "comment", getNoteForSample(sample));
	}

	/**
	 * @return
	 */
	private String getSampleRequesterOrganizationName() {
		SampleRequesterDAO sampleRequesterDAO = new SampleRequesterDAOImpl();
		List<SampleRequester> sampleRequestors = sampleRequesterDAO.getRequestersForSampleId(sample.getId());
		if (sampleRequestors.size() == 0) {
			return null;
		}
		long typeID = SamplePatientEntrySaveAction.ORGANIZATION_REQUESTER_TYPE_ID;
		for (SampleRequester sampleRequester : sampleRequestors) {
			if (sampleRequester.getRequesterTypeId() == typeID) {
				String orgId = String.valueOf(sampleRequester.getRequesterId());
				Organization org = orgDAO.getOrganizationById(orgId);
				
				if( org != null){
					String orgName = org.getOrganizationName();
					orgName += GenericValidator.isBlankOrNull(org.getShortName()) ? "" : ("-" + org.getShortName());
					return orgName;
				}
			}
		}
		return null;
	}

	/**
	 * @param provider
	 * @return
	 */
	private Person getProviderPerson(Provider provider) {
		if (provider == null) {
			return null;
		}
		Person providerPerson = provider.getPerson();
		personDAO.getData(providerPerson);
		return providerPerson;
	}

	/**
	 * @param sampleHuman
	 * @return
	 */
	private Provider getProvider() {
		if (sample == null) {
			return null;
		}
		SampleHuman sampleHuman = getSampleHuman();
		Provider provider = new Provider();
		String id = sampleHuman.getProviderId();
		if (id == null) {
			return null;
		}
		provider.setId(id);
		providerDAO.getData(provider);
		return provider;

	}

	/**
	 * @return
	 */
	private SampleHuman getSampleHuman() {
		SampleHuman sampleHuman = new SampleHuman();
		sampleHuman.setSampleId(sample.getId());
		sampleHumanDAO.getDataBySample(sampleHuman);
		return sampleHuman;
	}

	/**
	 * @param sample
	 * @return
	 */
	private List<QaEventItem> getSampleQaEventItems(Sample sample) {
		List<QaEventItem> qaEventItems = new ArrayList<QaEventItem>();
		if (sample != null) {
			getSampleQaEvents(sample);
			for (SampleQaEvent event : sampleQAEventList) {
				QAService qa = new QAService(event);
				QaEventItem item = new QaEventItem();
				item.setId(qa.getEventId());
				item.setQaEvent(qa.getQAEvent().getId());
				SampleItem sampleItem = qa.getSampleItem();
				item.setSampleType((sampleItem == null) ? null : sampleItem.getTypeOfSampleId());
				item.setSection(qa.getObservation(QAObservationType.SECTION));
				item.setAuthorizer(qa.getObservation(QAObservationType.AUTHORIZER));
				item.setRecordNumber(qa.getObservation(QAObservationType.DOC_NUMBER));
				item.setRemove(false);
				item.setNote(getNoteForSampleQaEvent(event));

				qaEventItems.add(item);
			}
		}

		int oldQaEvents = qaEventItems.size();
		for (int i = oldQaEvents; i < 10; i++) {
			qaEventItems.add(new QaEventItem());
		}
		return qaEventItems;
	}

	private Set<TypeOfSample> getSampleTypeOfSamples() {
		Set<TypeOfSample> typeOfSamples = new HashSet<TypeOfSample>();
		List<SampleItem> sampleItems = sampleItemDAO.getSampleItemsBySampleId(sample.getId());
		for (SampleItem sampleItem : sampleItems) {
			TypeOfSample typeOfSample = typeOfSampleDAO.getTypeOfSampleById(sampleItem.getTypeOfSampleId());
			if (!typeOfSamples.contains(typeOfSample)) {
				typeOfSamples.add(typeOfSample);
			}
		}
		return typeOfSamples;
	}

	private String getSampleTypeOfSamplesString() {
		if (sample == null) {
			return "";
		}
		Set<TypeOfSample> sampleTypeOfSamples = getSampleTypeOfSamples();
		StringBuilder str = new StringBuilder(",");
		for (TypeOfSample typeOfSample : sampleTypeOfSamples) {
			str.append(typeOfSample.getId()).append(",");
		}
		return str.toString();
	}

	public static String getNoteForSample(Sample sample) {
		Note note = new Note();
		note.setReferenceTableId(SAMPLE_TABLE_ID);
		note.setReferenceId(sample.getId());

		List<Note> noteList = noteDAO.getNoteByRefIAndRefTableAndSubject(sample.getId(), SAMPLE_TABLE_ID, QA_NOTE_SUBJECT);// noteDAO.getAllNotesByRefIdRefTable(note);
		if (!noteList.isEmpty()) {
			return noteList.get(0).getText();
		}

		return null;
	}

	public static String getNoteForSampleQaEvent(SampleQaEvent sampleQaEvent) {
		if (sampleQaEvent == null || GenericValidator.isBlankOrNull(sampleQaEvent.getId())) {
			return null;
		} else {
			List<Note> notes = NoteUtil.getNotesForObjectAndTable(sampleQaEvent.getId(), SAMPLE_QAEVENT_TABLE_ID);
			return (notes == null || notes.isEmpty()) ? null : notes.get(0).getText();
		}
	}

	private void getSampleQaEvents(Sample sample) {
		SampleQaEventDAO sampleQaEventDAO = new SampleQaEventDAOImpl();
		sampleQAEventList = sampleQaEventDAO.getSampleQaEventsBySample(sample);
	}

	private void setProjectList(BaseActionForm dynaForm) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
		ProjectDAO projectDAO = new ProjectDAOImpl();
		List<Project> projects = projectDAO.getAllProjects();
		PropertyUtils.setProperty(dynaForm, "projects", projects);
	}

	private Sample getSampleForLabNumber(String labNumber) throws LIMSInvalidConfigurationException {
		return sampleDAO.getSampleByAccessionNumber(labNumber);
	}

	private void getPatient(Sample sample) {
		SampleHumanDAO sampleHumanDAO = new SampleHumanDAOImpl();
		patient = sampleHumanDAO.getPatientForSample(sample);
	}

	private void getObservationHistory(Sample sample) {
		ObservationHistoryDAO observationDAO = new ObservationHistoryDAOImpl();
		observationHistoryList = observationDAO.getAll(patient, sample);
	}

	private Project getProjectForSample(Sample sample) {
		SampleProjectDAO samplePorjectDAO = new SampleProjectDAOImpl();
		SampleProject sampleProject = samplePorjectDAO.getSampleProjectBySampleId(sample.getId());

		return sampleProject == null ? null : sampleProject.getProject();
	}

	private String getSubjectNumber(Sample sample) {
		return !GenericValidator.isBlankOrNull(patient.getNationalId()) ? patient.getNationalId() : patient.getExternalId();
	}

	private ObservationHistory getRefererObservation(Sample sample) {
		for (ObservationHistory observation : observationHistoryList) {
			if (observation.getObservationHistoryTypeId().equals(DOCTOR_OBSERVATION_TYPE_ID)) {
				return observation;
			}
		}

		return null;
	}

	private ObservationHistory getServiceObservation(Sample sample) {
		for (ObservationHistory observation : observationHistoryList) {
			if (observation.getObservationHistoryTypeId().equals(SERVICE_OBSERVATION_TYPE_ID)) {
				return observation;
			}
		}

		return null;
	}

	private void sortSections(List<TestSection> list) {
		Collections.sort(list, new Comparator<TestSection>() {
			@Override
			public int compare(TestSection o1, TestSection o2) {
				return o1.getSortOrderInt() - o2.getSortOrderInt();
			}
		});
	}

	private List<TestSection> createSectionList() {

		List<TestSection> sections = new TestSectionDAOImpl().getAllActiveTestSections();
		TestSection extra = new TestSection();
		extra.setTestSectionName("Reception");
		extra.setSortOrder("0");
		extra.setNameKey("testSection.Reception");
		sections.add(extra);
		sortSections(sections);
		return sections;
	}

	@Override
	protected String getPageSubtitleKey() {
		return "qaevent.add.title";
	}

	@Override
	protected String getPageTitleKey() {
		return "qaevent.add.title";
	}
}
